library(kknn)
A_train <- read.table("C:/Users/anna_fox/Documents/UNIVERSE/4 курс/2 semester/Нейронные_сети/All_Labs/2Lab/svmdata4.txt", stringsAsFactors = TRUE)
A_test <- read.table("C:/Users/anna_fox/Documents/UNIVERSE/4 курс/2 semester/Нейронные_сети/All_Labs/2Lab/svmdata4test.txt", stringsAsFactors = TRUE)
A_result <- train.kknn(Colors ~ .,
A_train,
kmax = floor(sqrt(dim(A_train)[1]))+5,
kernel = c("triangular", "rectangular", "epanechnikov", "optimal", "inv"),
distance = 1)
print(A_result)
par(mfrow = c(1, 2))
plot(A_train$X1, A_train$X2,
col = ifelse(A_train$Colors == 'green', "green", "red"),
xlab = "X1", ylab = "X2")
#plot(A_train$X1, A_train$X2, pch = 21, bg = c("magenta","green") [unclass(A_train$Colors)])
plot(A_result)
View(A_result)
View(A_result)
library(kknn)
#отсортировал данные на тестовую обущающую выборки
data(glass)
myGlass <- glass[,-1]
n <- dim(myGlass)[1]
A_rand <- myGlass[ order(runif(n)), ]
nt <- as.integer(n*0.9)
glassTrain <- A_rand[1:nt, ]
glassTest <- A_rand[(nt+1):n, ]
sizeOfTrain <- dim(glassTrain)[1]
#fit.kknn <- kknn(Type ~ ., glassTrain, glassTest)
## запускаем процедуру train.kknn, используя
## расстояние Минковского с параметром 1 и с различными ядрами, максимальное K для поиска оптимального K равно 15
example <- data.frame("RI" = 1.516,"Na" = 11.7, "Mg" = 1.01, "Al" = 1.19, "Si" = 72.59, "K" = 0.43,"Ca" = 11.44, "Ba" = 0.02, "Fe" = 0.1, "Type" = "")
fit.train1 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1)
fit.train2 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2)
print(fit.train1)
print(fit.train2)
par(mfrow = c(1, 2))
plot(fit.train1, type = "o")
plot(fit.train2)
resList <- list()
for(i in 1:9){
glassTrainWithoutParam <- glassTrain[, -1*i]
glassTestWithoutParam <- glassTest[, -1*i]
print(glassTestWithoutParam)
perem <- kknn(Type~., glassTrainWithoutParam, glassTestWithoutParam)
fitty <- fitted(perem)
myTable <- table(fitty, glassTestWithoutParam$Type)
resList[i] <- (myTable[1,1] +myTable[2,2] + myTable[3,3] + myTable[4,4] + myTable[5,5] + myTable[6,6]) / sum(myTable)
}
plot(1:9, resList, type = "o")
A_GlassForTest <- read.csv("glass.csv", sep = ",", stringsAsFactors = TRUE)
perem <- kknn(Type~., glassTrain, A_GlassForTest)
fitty <- fitted(perem)
print(fitty)
library(kknn)
data(glass)
myGlass <- glass[,-1]
n <- dim(myGlass)[1]
A_rand <- myGlass[ order(runif(n)), ]
nt <- as.integer(n*0.9)
glassTrain <- A_rand[1:nt, ]
glassTest <- A_rand[(nt+1):n, ]
sizeOfTrain <- dim(glassTrain)[1]
example <- data.frame("RI" = 1.516,"Na" = 11.7, "Mg" = 1.01, "Al" = 1.19, "Si" = 72.59, "K" = 0.43,"Ca" = 11.44, "Ba" = 0.02, "Fe" = 0.1, "Type" = "")
train1 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1)
train2 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2)
print(train1)
print(train2)
par(mfrow = c(1, 2))
plot(train1, type = "o")
plot(train2)
library(kknn)
data(glass)
myGlass <- glass[,-1]
n <- dim(myGlass)[1]
A_rand <- myGlass[ order(runif(n)), ]
nt <- as.integer(n*0.9)
glassTrain <- A_rand[1:nt, ]
glassTest <- A_rand[(nt+1):n, ]
sizeOfTrain <- dim(glassTrain)[1]
example <- data.frame("RI" = 1.516,"Na" = 11.7, "Mg" = 1.01, "Al" = 1.19, "Si" = 72.59, "K" = 0.43,"Ca" = 11.44, "Ba" = 0.02, "Fe" = 0.1, "Type" = "")
train1 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1)
train2 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2)
print(train1)
print(train2)
par(mfrow = c(1, 2))
plot(train1, type = "o")
plot(train2)
resList <- list()
for (i in 1:9) {
glassTrainWithoutParam <- glassTrain[, -1*i]
glassTestWithoutParam <- glassTest[, -1*i]
print(glassTestWithoutParam)
perem <- kknn(Type~., glassTrainWithoutParam, glassTestWithoutParam)
fitty <- fitted(perem)
myTable <- table(fitty, glassTestWithoutParam$Type)
resList[i] <- (myTable[1,1] + myTable[2,2] + myTable[3,3] + myTable[4,4] + myTable[5,5] + myTable[6,6]) / sum(myTable)
}
plot(1:9, resList, type = "o")
A_GlassForTest <- read.csv("glass.csv", sep = ",", stringsAsFactors = TRUE)
perem <- kknn(Type~., glassTrain, A_GlassForTest)
fitty <- fitted(perem)
print(fitty)
library(kknn)
data(glass)
myGlass <- glass[,-1]
n <- dim(myGlass)[1]
A_rand <- myGlass[ order(runif(n)), ]
nt <- as.integer(n*0.9)
glassTrain <- A_rand[1:nt, ]
glassTest <- A_rand[(nt+1):n, ]
sizeOfTrain <- dim(glassTrain)[1]
example <- data.frame("RI" = 1.516,"Na" = 11.7, "Mg" = 1.01, "Al" = 1.19, "Si" = 72.59, "K" = 0.43,"Ca" = 11.44, "Ba" = 0.02, "Fe" = 0.1, "Type" = "")
train1 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1)
train2 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2)
print(train1)
print(train2)
par(mfrow = c(1, 2))
plot(train1, type = "o")
plot(train2)
resList <- list()
for (i in 1:9) {
glassTrainWithoutParam <- glassTrain[, -1*i]
glassTestWithoutParam <- glassTest[, -1*i]
print(glassTestWithoutParam)
perem <- kknn(Type~., glassTrainWithoutParam, glassTestWithoutParam)
myTable <- table(fitted(perem), glassTestWithoutParam$Type)
resList[i] <- (myTable[1,1] + myTable[2,2] + myTable[3,3] + myTable[4,4] + myTable[5,5] + myTable[6,6]) / sum(myTable)
}
plot(1:9, resList, type = "o")
View(glassTrain)
View(glassTrain)
View(example)
View(example)
perem <- kknn(Type~., glassTrain, example)
fitty <- fitted(perem)
print(fitty)
example <- data.frame("RI" = 1.516,"Na" = 11.7, "Mg" = 1.01, "Al" = 1.19, "Si" = 72.59, "K" = 0.43,"Ca" = 11.44, "Ba" = 0.02, "Fe" = 0.1, "Type" = "")
perem <- kknn(Type~., glassTrain, example)
print(fitted(perem))
library(kknn)
data(glass)
myGlass <- glass[,-1]
n <- dim(myGlass)[1]
A_rand <- myGlass[ order(runif(n)), ]
nt <- as.integer(n*0.9)
glassTrain <- A_rand[1:nt, ]
glassTest <- A_rand[(nt+1):n, ]
sizeOfTrain <- dim(glassTrain)[1]
example <- data.frame("RI" = 1.516,"Na" = 11.7, "Mg" = 1.01, "Al" = 1.19, "Si" = 72.59, "K" = 0.43,"Ca" = 11.44, "Ba" = 0.02, "Fe" = 0.1, "Type" = "")
perem <- kknn(Type~., glassTrain, example)
print(fitted(perem))
train1 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1)
train2 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2)
print(train1)
print(train2)
par(mfrow = c(1, 2))
plot(train1, type = "b")
plot(train2)
par(mfrow = c(1, 2))
plot(train1, type = "b", title = "distance = 1")
plot(train2, type = "b", title = "distance = 2")
library(kknn)
data(glass)
myGlass <- glass[,-1]
n <- dim(myGlass)[1]
A_rand <- myGlass[ order(runif(n)), ]
nt <- as.integer(n*0.9)
glassTrain <- A_rand[1:nt, ]
glassTest <- A_rand[(nt+1):n, ]
sizeOfTrain <- dim(glassTrain)[1]
example <- data.frame("RI" = 1.516,"Na" = 11.7, "Mg" = 1.01, "Al" = 1.19, "Si" = 72.59, "K" = 0.43,"Ca" = 11.44, "Ba" = 0.02, "Fe" = 0.1, "Type" = "")
perem <- kknn(Type~., glassTrain, example)
print(fitted(perem))
train1 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1)
train2 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2)
print(train1)
print(train2)
par(mfrow = c(1, 2))
plot(train1, type = "b", title = "distance = 1")
plot(train2, type = "b", title = "distance = 2")
library(kknn)
data(glass)
myGlass <- glass[,-1]
n <- dim(myGlass)[1]
A_rand <- myGlass[ order(runif(n)), ]
nt <- as.integer(n*0.9)
glassTrain <- A_rand[1:nt, ]
glassTest <- A_rand[(nt+1):n, ]
sizeOfTrain <- dim(glassTrain)[1]
example <- data.frame("RI" = 1.516,"Na" = 11.7, "Mg" = 1.01, "Al" = 1.19, "Si" = 72.59, "K" = 0.43,"Ca" = 11.44, "Ba" = 0.02, "Fe" = 0.1, "Type" = "")
perem <- kknn(Type~., glassTrain, example)
print(fitted(perem))
train1 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1)
train2 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2)
print(train1)
print(train2)
par(mfrow = c(1, 2))
plot(train1, type = "b", main = "distance = 1")
plot(train2, type = "b", main = "distance = 2")
library(kknn)
data(glass)
myGlass <- glass[,-1]
n <- dim(myGlass)[1]
A_rand <- myGlass[ order(runif(n)), ]
nt <- as.integer(n*0.9)
glassTrain <- A_rand[1:nt, ]
glassTest <- A_rand[(nt+1):n, ]
sizeOfTrain <- dim(glassTrain)[1]
example <- data.frame("RI" = 1.516,"Na" = 11.7, "Mg" = 1.01, "Al" = 1.19, "Si" = 72.59, "K" = 0.43,"Ca" = 11.44, "Ba" = 0.02, "Fe" = 0.1, "Type" = "")
perem <- kknn(Type~., glassTrain, example)
print(fitted(perem))
train1 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1)
train2 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2)
print(train1)
print(train2)
par(mfrow = c(1, 2))
plot(train1, type = "b", main = "distance = 1")
plot(train2, type = "b", main = "distance = 2")
resList <- list()
for (i in 1:9) {
glassTrainWithoutParam <- glassTrain[, -1*i]
glassTestWithoutParam <- glassTest[, -1*i]
print(glassTestWithoutParam)
perem <- kknn(Type~., glassTrainWithoutParam, glassTestWithoutParam)
myTable <- table(fitted(perem), glassTestWithoutParam$Type)
resList[i] <- (myTable[1,1] + myTable[2,2] + myTable[3,3] + myTable[4,4] + myTable[5,5] + myTable[6,6]) / sum(myTable)
}
plot(1:9, resList, type = "b")
library(kknn)
data(glass)
myGlass <- glass[,-1]
n <- dim(myGlass)[1]
A_rand <- myGlass[ order(runif(n)), ]
nt <- as.integer(n*0.9)
glassTrain <- A_rand[1:nt, ]
glassTest <- A_rand[(nt+1):n, ]
sizeOfTrain <- dim(glassTrain)[1]
example <- data.frame("RI" = 1.516,"Na" = 11.7, "Mg" = 1.01, "Al" = 1.19, "Si" = 72.59, "K" = 0.43,"Ca" = 11.44, "Ba" = 0.02, "Fe" = 0.1, "Type" = "")
perem <- kknn(Type~., glassTrain, example)
print(fitted(perem))
train1 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1)
train2 <- train.kknn(Type ~ ., glassTrain, kmax = floor(sqrt(sizeOfTrain) + 10),kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2)
print(train1)
print(train2)
par(mfrow = c(1, 2))
plot(train1, type = "b", main = "distance = 1")
plot(train2, type = "b", main = "distance = 2")
resList <- list()
for (i in 1:9) {
glassTrainWithoutParam <- glassTrain[, -1*i]
glassTestWithoutParam <- glassTest[, -1*i]
print(glassTestWithoutParam)
perem <- kknn(Type~., glassTrainWithoutParam, glassTestWithoutParam)
myTable <- table(fitted(perem), glassTestWithoutParam$Type)
resList[i] <- (myTable[1,1] + myTable[2,2] + myTable[3,3] + myTable[4,4] + myTable[5,5] + myTable[6,6]) / sum(myTable)
}
plot(1:9, resList, type = "b",
xlab = "Excluded class",
ylab = "Success probability")
library(e1071)
A_train <- read.csv("C:/Users/anna_fox/Documents/UNIVERSE/4 курс/2 semester/Нейронные_сети/All_Labs/1Lab/train.csv", stringsAsFactors = TRUE)
A_test <- read.csv("C:/Users/anna_fox/Documents/UNIVERSE/4 курс/2 semester/Нейронные_сети/All_Labs/1Lab/test.csv", stringsAsFactors = TRUE)
A_check <- read.csv("C:/Users/anna_fox/Documents/UNIVERSE/4 курс/2 semester/Нейронные_сети/All_Labs/1Lab/gender_submission.csv", stringsAsFactors = TRUE)
A_classifier <- naiveBayes(A_train[,-2], as.factor(A_train$Survived))
A_predicted <- predict(A_classifier, A_test)
myTable <- table(A_predicted, A_check$Survived)
myTable
(myTable[2] + myTable[3])/(dim(A_test)[1])
View(A_train)
View(A_train)
View(A_check)
View(A_check)
