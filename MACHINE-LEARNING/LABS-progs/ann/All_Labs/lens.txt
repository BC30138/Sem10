Обучающее множество: Lenses Data Set
3 класса: 
1 : пациенту следует носить жесткие контактные линзы, 
2 : пациенту следует носить мягкие контактные линзы, 
3 : пациенту не следует носить контактные линзы. 
Признаки (категориальные):
1. возраст пациента: (1) молодой, (2) предстарческая дальнозоркость, (3) старческая дальнозоркость 
2. состояние зрения: (1) близорукий, (2) дальнозоркий 
3. астигматизм: (1) нет, (2) да 
4. состояние слезы: (1) сокращенная, (2) нормальная

#install.packages("e1071")
library(e1071)
### Naive Bayesian (данные категориальные)
# 1#########################################################################
# импортируем данные в R
# установить параметр stringsAsFactors = TRUE, так как все данные - категориальные

	A_raw <- read.table("Lenses.txt", stringsAsFactors = TRUE)

# удаляем первый столбец

	A_raw <- A_raw[,-1]  

# число строк в базе

	n <- dim(A_raw)[1]
	A_raw[A_raw == "1"] <- "a"
	A_raw[A_raw == "2"] <- "b"
	A_raw[A_raw == "3"] <- "c"

# Создан фрейм, который можно просмотреть, используя str(A_raw).
# Имеется 5 столбцов V3,V4,V5,V6 and V2 (класс) и все имеют один и тот же тип Factor.
# 2##########################################################################
# Создание обучающей и тестирующей выборки
# Скажем, имеем 24 примеров в нашей исходной, используем 18 для обучения и 6 для тестирования. 
# Устанавливаем базу генерации случайных чисел и рандомизируем выборку

	set.seed(12345)
	A_rand <- A_raw[ order(runif(24)), ]

# разделим данные на обучающие и тестирующие

	A_train <- A_rand[1:23, ]
	A_test <- A_rand[24:24, ]

# Можно убеиться, какой имеется процент каждого класса V2 в обучающей и тестирующей выборке

	prop.table(table(A_train$V2))
	prop.table(table(A_test$V2))

# 3##########################################################################
# Используем Наивный Байесовский классификатор из пакета e1071

	A_classifier <- naiveBayes(V2 ~ ., data = A_train, laplace = 1)
	A_predicted <- predict(A_classifier, A_test)
	table(A_predicted, A_test$V2)

# 4##########################################################################
# Теперь оценим полученную модель:

	A_predicted <- predict(A_classifier, A_test)
