plot(svmModelLinear, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain2 = predict(svmModelLinear, A_testObjects)
table(A_test$"Colors", predictionsTrain2)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "linear")
plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
plot(svmModelLinear, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain2 = predict(svmModelLinear, A_testObjects)
table(A_test$"Colors", predictionsTrain2)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 2, kernel = "linear")
plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 3, kernel = "linear")
plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 4, kernel = "linear")
plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 5, kernel = "linear")
#plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 6, kernel = "linear")
#plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 20, kernel = "linear")
#plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 0.1, kernel = "linear")
#plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 0, kernel = "linear")
#plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 7, kernel = "linear")
#plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 8, kernel = "linear")
#plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 9, kernel = "linear")
#plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 11, kernel = "linear")
#plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 12, kernel = "linear")
#plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 13, kernel = "linear")
#plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelLinear = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 14, kernel = "linear")
#plot(svmModelLinear, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelLinear, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
library(e1071)
A_train <- read.table("svmdata3.txt", stringsAsFactors = TRUE)
A_trainObjects <- A_train[,-3]
area.pallete = function(n = 2)
{
cols = rainbow(n)
cols[1:2] = c("olivedrab3", "firebrick1")
return(cols)
}
symbols.pallete = c("darkolivegreen", "darkred")
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial", degree = 2)
plot(svmModelPoly, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelPoly, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelRadial = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "radial")
plot(svmModelRadial, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelRadial, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelSigmoid = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "sigmoid", gamma = 0.5)
plot(svmModelSigmoid, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelSigmoid, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial", degree = 2)
plot(svmModelPoly, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelPoly, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
library(e1071)
A_train <- read.table("svmdata3.txt", stringsAsFactors = TRUE)
A_trainObjects <- A_train[,-3]
area.pallete = function(n = 2)
{
cols = rainbow(n)
cols[1:2] = c("olivedrab3", "firebrick1")
return(cols)
}
symbols.pallete = c("darkolivegreen", "darkred")
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial", degree = 2)
plot(svmModelPoly, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelPoly, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelRadial = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "radial")
plot(svmModelRadial, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelRadial, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelRadial = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "radial")
plot(svmModelRadial, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelRadial, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
library(e1071)
A_train <- read.table("svmdata3.txt", stringsAsFactors = TRUE)
A_trainObjects <- A_train[,-3]
area.pallete = function(n = 2)
{
cols = rainbow(n)
cols[1:2] = c("olivedrab3", "firebrick1")
return(cols)
}
symbols.pallete = c("darkolivegreen", "darkred")
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial", degree = 2)
plot(svmModelPoly, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelPoly, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelRadial = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "radial")
plot(svmModelRadial, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelRadial, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
library(e1071)
A_train <- read.table("svmdata3.txt", stringsAsFactors = TRUE)
A_trainObjects <- A_train[,-3]
area.pallete = function(n = 2)
{
cols = rainbow(n)
cols[1:2] = c("olivedrab3", "firebrick1")
return(cols)
}
symbols.pallete = c("darkolivegreen", "darkred")
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial", degree = 2)
plot(svmModelPoly, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelPoly, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelRadial = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "radial")
plot(svmModelRadial, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelRadial, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelSigmoid = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "sigmoid", gamma = 0.5)
plot(svmModelSigmoid, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelSigmoid, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial", degree = 1)
plot(svmModelPoly, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelPoly, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial", degree = 2)
plot(svmModelPoly, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelPoly, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial", degree = 3)
#plot(svmModelPoly, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelPoly, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial", degree = 4)
#plot(svmModelPoly, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelPoly, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial", degree = 5)
#plot(svmModelPoly, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelPoly, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial", degree = 6)
#plot(svmModelPoly, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelPoly, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial", degree = 7)
#plot(svmModelPoly, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelPoly, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial", degree = 8)
#plot(svmModelPoly, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelPoly, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
#Как подобрать C, если на первом графике один точно окажется не в своем поле.
library(e1071)
A_train <- read.table("svmdata4.txt", stringsAsFactors = TRUE)
A_test <- read.table("svmdata4test.txt", stringsAsFactors = TRUE)
A_trainObjects <- A_train[,-3]
A_testObjects <- A_test[,-3]
area.pallete = function(n = 2)
{
cols = rainbow(n)
cols[1:2] = c("olivedrab3", "firebrick1")
return(cols)
}
symbols.pallete = c("darkolivegreen", "darkred")
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial")
plot(svmModelPoly, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain1 = predict(svmModelPoly, A_testObjects)
table(A_test$"Colors", predictionsTrain1)
svmModelRadial = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "radial")
plot(svmModelRadial, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain2 = predict(svmModelRadial, A_testObjects)
table(A_test$"Colors", predictionsTrain2)
svmModelSigmoid = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "sigmoid")
plot(svmModelSigmoid, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain3 = predict(svmModelSigmoid, A_testObjects)
table(A_test$"Colors", predictionsTrain3)
#Как подобрать C, если на первом графике один точно окажется не в своем поле.
library(e1071)
A_train <- read.table("svmdata4.txt", stringsAsFactors = TRUE)
A_test <- read.table("svmdata4test.txt", stringsAsFactors = TRUE)
A_trainObjects <- A_train[,-3]
A_testObjects <- A_test[,-3]
area.pallete = function(n = 2)
{
cols = rainbow(n)
cols[1:2] = c("olivedrab3", "firebrick1")
return(cols)
}
symbols.pallete = c("darkolivegreen", "darkred")
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial")
#plot(svmModelPoly, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain1 = predict(svmModelPoly, A_testObjects)
table(A_test$"Colors", predictionsTrain1)
svmModelRadial = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "radial")
#plot(svmModelRadial, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain2 = predict(svmModelRadial, A_testObjects)
table(A_test$"Colors", predictionsTrain2)
svmModelSigmoid = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "sigmoid")
#plot(svmModelSigmoid, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain3 = predict(svmModelSigmoid, A_testObjects)
table(A_test$"Colors", predictionsTrain3)
#Как подобрать C, если на первом графике один точно окажется не в своем поле.
library(e1071)
A_train <- read.table("svmdata4.txt", stringsAsFactors = TRUE)
A_test <- read.table("svmdata4test.txt", stringsAsFactors = TRUE)
A_trainObjects <- A_train[,-3]
A_testObjects <- A_test[,-3]
area.pallete = function(n = 2)
{
cols = rainbow(n)
cols[1:2] = c("olivedrab3", "firebrick1")
return(cols)
}
symbols.pallete = c("darkolivegreen", "darkred")
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial")
#plot(svmModelPoly, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain1 = predict(svmModelPoly, A_testObjects)
table(A_test$"Colors", predictionsTrain1)
svmModelRadial = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "radial")
#plot(svmModelRadial, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain2 = predict(svmModelRadial, A_testObjects)
table(A_test$"Colors", predictionsTrain2)
svmModelSigmoid = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "sigmoid")
#plot(svmModelSigmoid, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain3 = predict(svmModelSigmoid, A_testObjects)
table(A_test$"Colors", predictionsTrain3)
#В чем заключается переобучение?
library(e1071)
A_train <- read.table("svmdata5.txt", stringsAsFactors = TRUE)
A_test <- read.table("svmdata5test.txt", stringsAsFactors = TRUE)
A_trainObjects <- A_train[,-3]
A_testObjects <- A_test[,-3]
area.pallete = function(n = 2)
{
cols = rainbow(n)
cols[1:2] = c("PaleGreen", "Pink")
return(cols)
}
symbols.pallete = c("Green", "Red")
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial", gamma = 30)
#plot(svmModelPoly, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain1 = predict(svmModelPoly, A_testObjects)
table(A_test$"Colors", predictionsTrain1)
svmModelRadial = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "radial", gamma = 40)
#plot(svmModelRadial, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain2 = predict(svmModelRadial, A_testObjects)
table(A_test$"Colors", predictionsTrain2)
svmModelSigmoid = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "sigmoid")
#plot(svmModelSigmoid, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain3 = predict(svmModelSigmoid, A_testObjects)
table(A_test$"Colors", predictionsTrain3)
#Как подобрать C, если на первом графике один точно окажется не в своем поле.
library(e1071)
A_train <- read.table("svmdata4.txt", stringsAsFactors = TRUE)
A_test <- read.table("svmdata4test.txt", stringsAsFactors = TRUE)
A_trainObjects <- A_train[,-3]
A_testObjects <- A_test[,-3]
area.pallete = function(n = 2)
{
cols = rainbow(n)
cols[1:2] = c("olivedrab3", "firebrick1")
return(cols)
}
symbols.pallete = c("darkolivegreen", "darkred")
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial")
#plot(svmModelPoly, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain1 = predict(svmModelPoly, A_testObjects)
table(A_test$"Colors", predictionsTrain1)
svmModelRadial = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "radial")
#plot(svmModelRadial, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain2 = predict(svmModelRadial, A_testObjects)
table(A_test$"Colors", predictionsTrain2)
svmModelSigmoid = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "sigmoid")
#plot(svmModelSigmoid, A_test, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain3 = predict(svmModelSigmoid, A_testObjects)
table(A_test$"Colors", predictionsTrain3)
library(e1071)
A_train <- read.table("svmdata3.txt", stringsAsFactors = TRUE)
A_trainObjects <- A_train[,-3]
area.pallete = function(n = 2)
{
cols = rainbow(n)
cols[1:2] = c("olivedrab3", "firebrick1")
return(cols)
}
symbols.pallete = c("darkolivegreen", "darkred")
svmModelPoly = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "polynomial", degree = 8)
#plot(svmModelPoly, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelPoly, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelRadial = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "radial")
plot(svmModelRadial, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelRadial, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
svmModelSigmoid = svm(Colors ~ ., data = A_train, type = "C-classification", cost = 1, kernel = "sigmoid", gamma = 0.5)
plot(svmModelSigmoid, A_train, grid = 250, symbolPalette = symbols.pallete, color.palette = area.pallete)
predictionsTrain = predict(svmModelSigmoid, A_trainObjects)
table(A_train$"Colors", predictionsTrain)
library(e1071)
A_train <- read.table("svmdata6.txt", stringsAsFactors = TRUE)
x = A_train$X
y = A_train$Y
plot(x, y)
svmModel = svm(x, y, type = "eps-regression", eps = 0.25, cost = 1, kernel = "radial")
points(x[svmModel$index], y[svmModel$index], col = "red")
predctions = predict(svmModel, x)
lines(x, predctions, col = "dodgerblue", lwd = 2)
lines(x, predctions + svmModel$epsilon, col = "cyan")
lines(x, predctions - svmModel$epsilon, col = "cyan")
library(e1071)
A_train <- read.table("svmdata6.txt", stringsAsFactors = TRUE)
x = A_train$X
y = A_train$Y
plot(x, y)
svmModel = svm(x, y, type = "eps-regression", eps = 0.25, cost = 1, kernel = "radial")
points(x[svmModel$index], y[svmModel$index], col = "red")
predctions = predict(svmModel, x)
lines(x, predctions, col = "dodgerblue", lwd = 2)
lines(x, predctions + svmModel$epsilon)
lines(x, predctions - svmModel$epsilon)
library(e1071)
A_train <- read.table("svmdata6.txt", stringsAsFactors = TRUE)
x = A_train$X
y = A_train$Y
plot(x, y)
svmModel = svm(x, y, type = "eps-regression", eps = 0.25, cost = 1, kernel = "radial")
points(x[svmModel$index], y[svmModel$index], col = "red")
predctions = predict(svmModel, x)
lines(x, predctions, col = "dodgerblue", lwd = 2)
lines(x, predctions + svmModel$epsilon, col = "darkolivegreen")
lines(x, predctions - svmModel$epsilon, col = "darkolivegreen")
library(e1071)
A_train <- read.table("svmdata6.txt", stringsAsFactors = TRUE)
x = A_train$X
y = A_train$Y
plot(x, y)
svmModel = svm(x, y, type = "eps-regression", eps = 0.25, cost = 1, kernel = "radial")
points(x[svmModel$index], y[svmModel$index], col = "red")
predctions = predict(svmModel, x)
lines(x, predctions, col = "dodgerblue", lwd = 2)
lines(x, predctions + svmModel$epsilon, col = "gold2")
lines(x, predctions - svmModel$epsilon, col = "gold2")
library(e1071)
A_train <- read.table("svmdata6.txt", stringsAsFactors = TRUE)
x = A_train$X
y = A_train$Y
plot(x, y)
svmModel = svm(x, y, type = "eps-regression", eps = 0.25, cost = 1, kernel = "radial")
points(x[svmModel$index], y[svmModel$index], col = "red")
predctions = predict(svmModel, x)
lines(x, predctions, col = "deeppink4", lwd = 2)
lines(x, predctions + svmModel$epsilon, col = "gold2")
lines(x, predctions - svmModel$epsilon, col = "gold2")
library(e1071)
A_train <- read.table("svmdata6.txt", stringsAsFactors = TRUE)
x = A_train$X
y = A_train$Y
plot(x, y)
svmModel = svm(x, y, type = "eps-regression", eps = 0.25, cost = 1, kernel = "radial")
points(x[svmModel$index], y[svmModel$index], col = "red")
predctions = predict(svmModel, x)
lines(x, predctions, col = "deeppink4", lwd = 2)
lines(x, predctions + svmModel$epsilon, col = "gold2")
lines(x, predctions - svmModel$epsilon, col = "gold2")
View(svmModel)
View(svmModel)
svmModel[["index"]]
library(e1071)
A_train <- read.table("svmdata6.txt", stringsAsFactors = TRUE)
x = A_train$X
y = A_train$Y
plot(x, y)
svmModel = svm(x, y, type = "eps-regression", eps = 0.25, cost = 1, kernel = "radial")
#points(x[svmModel$index], y[svmModel$index], col = "red")
predctions = predict(svmModel, x)
points(x,predctions,col = "blue")
#lines(x, predctions, col = "deeppink4", lwd = 2)
#lines(x, predctions + svmModel$epsilon, col = "gold2")
#lines(x, predctions - svmModel$epsilon, col = "gold2")
View(A_train)
View(A_train)
library(e1071)
# A_train <- read.table("svmdata6.txt", stringsAsFactors = TRUE)
# x = A_train$X
# y = A_train$Y
# plot(x, y)
# svmModel = svm(x, y, type = "eps-regression", eps = 0.25, cost = 1, kernel = "radial")
# points(x[svmModel$index], y[svmModel$index], col = "red")
# predctions = predict(svmModel, x)
# lines(x, predctions, col = "deeppink4", lwd = 2)
# lines(x, predctions + svmModel$epsilon, col = "gold2")
# lines(x, predctions - svmModel$epsilon, col = "gold2")
A_raw <- read.table("svmdata6.txt", stringsAsFactors = TRUE)
View(A_raw)
View(A_raw)
library(e1071)
# A_train <- read.table("svmdata6.txt", stringsAsFactors = TRUE)
# x = A_train$X
# y = A_train$Y
# plot(x, y)
# svmModel = svm(x, y, type = "eps-regression", eps = 0.25, cost = 1, kernel = "radial")
# points(x[svmModel$index], y[svmModel$index], col = "red")
# predctions = predict(svmModel, x)
# lines(x, predctions, col = "deeppink4", lwd = 2)
# lines(x, predctions + svmModel$epsilon, col = "gold2")
# lines(x, predctions - svmModel$epsilon, col = "gold2")
A_raw <- read.table("svmdata6.txt", stringsAsFactors = TRUE)
View(A_raw)
View(A_raw)
library(e1071)
# A_train <- read.table("svmdata6.txt", stringsAsFactors = TRUE)
# x = A_train$X
# y = A_train$Y
# plot(x, y)
# svmModel = svm(x, y, type = "eps-regression", eps = 0.25, cost = 1, kernel = "radial")
# points(x[svmModel$index], y[svmModel$index], col = "red")
# predctions = predict(svmModel, x)
# lines(x, predctions, col = "deeppink4", lwd = 2)
# lines(x, predctions + svmModel$epsilon, col = "gold2")
# lines(x, predctions - svmModel$epsilon, col = "gold2")
A_raw <- read.table("svmdata6_1.txt", stringsAsFactors = TRUE)
View(A_raw)
View(A_raw)
library(e1071)
# A_train <- read.table("svmdata6.txt", stringsAsFactors = TRUE)
# x = A_train$X
# y = A_train$Y
# plot(x, y)
# svmModel = svm(x, y, type = "eps-regression", eps = 0.25, cost = 1, kernel = "radial")
# points(x[svmModel$index], y[svmModel$index], col = "red")
# predctions = predict(svmModel, x)
# lines(x, predctions, col = "deeppink4", lwd = 2)
# lines(x, predctions + svmModel$epsilon, col = "gold2")
# lines(x, predctions - svmModel$epsilon, col = "gold2")
A_raw <- read.table("svmdata6_1.txt", stringsAsFactors = TRUE)
A_train <- A_raw[,-3]
View(A_train)
View(A_train)
library(e1071)
# A_train <- read.table("svmdata6.txt", stringsAsFactors = TRUE)
# x = A_train$X
# y = A_train$Y
# plot(x, y)
# svmModel = svm(x, y, type = "eps-regression", eps = 0.25, cost = 1, kernel = "radial")
# points(x[svmModel$index], y[svmModel$index], col = "red")
# predctions = predict(svmModel, x)
# lines(x, predctions, col = "deeppink4", lwd = 2)
# lines(x, predctions + svmModel$epsilon, col = "gold2")
# lines(x, predctions - svmModel$epsilon, col = "gold2")
A_raw <- read.table("svmdata6_1.txt", stringsAsFactors = TRUE)
#A_raw
A_train <- A_raw[,-3]
svmModel = svm(z~., A_raw, type = "eps-regression", eps = 0.25, cost = 1, kernel = "radial")
A_raw <- read.table("svmdata6_1.txt", stringsAsFactors = TRUE)
#A_raw
A_train <- A_raw[,-3]
View(A_raw)
View(A_raw)
library(e1071)
# A_train <- read.table("svmdata6.txt", stringsAsFactors = TRUE)
# x = A_train$X
# y = A_train$Y
# plot(x, y)
# svmModel = svm(x, y, type = "eps-regression", eps = 0.25, cost = 1, kernel = "radial")
# points(x[svmModel$index], y[svmModel$index], col = "red")
# predctions = predict(svmModel, x)
# lines(x, predctions, col = "deeppink4", lwd = 2)
# lines(x, predctions + svmModel$epsilon, col = "gold2")
# lines(x, predctions - svmModel$epsilon, col = "gold2")
A_raw <- read.table("svmdata6_1.txt", stringsAsFactors = TRUE)
#A_raw
A_train <- A_raw[,-3]
svmModel = svm(V3~., A_raw, type = "eps-regression", eps = 0.25, cost = 1, kernel = "radial")
